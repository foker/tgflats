import { NodeSDK } from '@opentelemetry/sdk-node';
import { getNodeAutoInstrumentations } from '@opentelemetry/auto-instrumentations-node';
import { PeriodicExportingMetricReader, ConsoleMetricExporter } from '@opentelemetry/sdk-metrics';
import { Resource } from '@opentelemetry/resources';
import { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';
import { PrometheusExporter } from '@opentelemetry/exporter-prometheus';
import { JaegerExporter } from '@opentelemetry/exporter-jaeger';
import { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';

export function initializeTracing(): NodeSDK {
  // Create resource identifying the service
  const resource = Resource.default().merge(
    new Resource({
      [SemanticResourceAttributes.SERVICE_NAME]: 'tbi-prop-backend',
      [SemanticResourceAttributes.SERVICE_VERSION]: process.env.npm_package_version || '1.0.0',
      ['environment']: process.env.NODE_ENV || 'development',
    }),
  );

  // Jaeger exporter for traces (optional, only if Jaeger is running)
  const jaegerExporter = new JaegerExporter({
    endpoint: process.env.JAEGER_ENDPOINT || 'http://localhost:14268/api/traces',
  });

  // Prometheus exporter for metrics
  const prometheusExporter = new PrometheusExporter(
    {
      port: 9464, // Different port from main metrics endpoint
      endpoint: '/metrics',
    },
    () => {
      console.log('Prometheus metrics server started on port 9464');
    },
  );

  // Create SDK
  const sdk = new NodeSDK({
    resource,
    spanProcessor: new BatchSpanProcessor(jaegerExporter),
    metricReader: prometheusExporter,
    instrumentations: [
      getNodeAutoInstrumentations({
        '@opentelemetry/instrumentation-fs': {
          enabled: false, // Disable fs instrumentation to reduce noise
        },
        '@opentelemetry/instrumentation-http': {
          requestHook: (span: any, request: any) => {
            span.setAttributes({
              'http.request.body': JSON.stringify((request as any).body || {}),
            });
          },
        },
        '@opentelemetry/instrumentation-express': {
          requestHook: (span: any, { request }: any) => {
            span.setAttributes({
              'express.route': request.route?.path || 'unknown',
              'express.params': JSON.stringify(request.params || {}),
            });
          },
        },
      }),
    ],
  });

  // Initialize the SDK
  sdk.start();

  // Gracefully shut down the SDK on process exit
  process.on('SIGTERM', () => {
    sdk
      .shutdown()
      .then(() => console.log('Tracing terminated'))
      .catch((error) => console.log('Error terminating tracing', error))
      .finally(() => process.exit(0));
  });

  return sdk;
}