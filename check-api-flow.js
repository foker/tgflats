const { chromium } = require('playwright');

(async () => {
  const browser = await chromium.launch({ headless: false });
  const context = await browser.newContext();
  const page = await context.newPage();

  // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ API –∑–∞–ø—Ä–æ—Å—ã
  page.on('request', request => {
    if (request.url().includes('/api/')) {
      console.log('üì§ API Request:', request.method(), request.url());
    }
  });

  page.on('response', response => {
    if (response.url().includes('/api/')) {
      console.log('üì• API Response:', response.status(), response.url());
    }
  });

  // –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ –ª–æ–≥–∏
  page.on('console', msg => {
    if (msg.text().includes('Fetching') || msg.text().includes('listings')) {
      console.log('üîç Console:', msg.text());
    }
    if (msg.type() === 'error') {
      console.log('‚ùå Error:', msg.text());
    }
  });

  // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
  console.log('üîç Opening http://localhost:5173...\n');
  
  try {
    await page.goto('http://localhost:5173', { waitUntil: 'networkidle' });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
    await page.waitForTimeout(3000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const listingCards = await page.locator('[class*="ListingCard"], [class*="listing-card"], [class*="grid"] > div > div').count();
    console.log('\nüì¶ Listing cards found on page:', listingCards);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const titles = await page.locator('h3, .text-lg').allTextContents();
    console.log('üìù Titles found:', titles.slice(0, 3));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–Ω
    const prices = await page.locator('[class*="text-2xl"], [class*="price"]').allTextContents();
    console.log('üí∞ Prices found:', prices.slice(0, 3));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑—á–∏–∫
    const hasLoader = await page.locator('.animate-spin').count();
    console.log('‚è≥ Loader visible:', hasLoader > 0);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤
    const noListingsMsg = await page.locator('text=/No listings found/i').count();
    console.log('üì≠ "No listings" message:', noListingsMsg > 0);
    
    // –ü–æ–ª—É—á–∞–µ–º API –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
    const apiResponse = await page.evaluate(async () => {
      try {
        const response = await fetch('http://localhost:3333/api/listings');
        const data = await response.json();
        return {
          status: response.status,
          dataLength: data.data ? data.data.length : 0,
          total: data.total || data.meta?.total || 0,
          firstItem: data.data?.[0]
        };
      } catch (error) {
        return { error: error.message };
      }
    });
    
    console.log('\nüî¨ Direct API check:', apiResponse);
    
    // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    await page.screenshot({ path: 'api-flow-check.png', fullPage: true });
    console.log('\nüì∏ Screenshot saved: api-flow-check.png');
    
    console.log('\nüëÄ Browser will stay open for 10 seconds...');
    await page.waitForTimeout(10000);
    
  } catch (error) {
    console.error('Failed:', error.message);
  }
  
  await browser.close();
})();