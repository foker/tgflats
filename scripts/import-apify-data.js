const { PrismaClient } = require('@prisma/client');
const fs = require('fs');
const path = require('path');

const prisma = new PrismaClient({
  datasources: {
    db: {
      url: 'postgresql://postgres:postgres@localhost:5433/tbi_prop'
    }
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ views ("10K" -> 10000)
function parseViews(viewsStr) {
  if (!viewsStr) return null;
  
  const str = viewsStr.toString().trim();
  let multiplier = 1;
  let numStr = str;
  
  if (str.endsWith('K')) {
    multiplier = 1000;
    numStr = str.slice(0, -1);
  } else if (str.endsWith('M')) {
    multiplier = 1000000;
    numStr = str.slice(0, -1);
  }
  
  const num = parseFloat(numStr);
  return isNaN(num) ? null : Math.floor(num * multiplier);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è channel ID –∏–∑ —Å—Å—ã–ª–∫–∏
function extractChannelInfo(item) {
  // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ link
  if (item.link) {
    const match = item.link.match(/t\.me\/([^\/]+)\/(\d+)/);
    if (match) {
      return {
        channelUsername: match[1],
        messageId: BigInt(match[2])
      };
    }
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º id –∫–∞–∫ messageId –∏ author –∫–∞–∫ channel
  const channelUsername = item.author ? 
    item.author.toLowerCase()
      .replace(/[^a-z0-9_]/g, '_')
      .replace(/_+/g, '_')
      .substring(0, 50) : 
    'unknown_channel';
    
  return {
    channelUsername,
    messageId: BigInt(item.id || Date.now())
  };
}

async function importData() {
  try {
    console.log('üöÄ Starting data import to PostgreSQL...\n');
    
    // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const dataFile = path.join(__dirname, '..', 'data', 'apify-datasets', 'combined-dataset.json');
    const data = JSON.parse(fs.readFileSync(dataFile, 'utf-8'));
    
    console.log(`üìä Found ${data.length} items to import\n`);
    
    // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    const channels = new Map();
    
    data.forEach(item => {
      const { channelUsername } = extractChannelInfo(item);
      if (!channels.has(channelUsername)) {
        channels.set(channelUsername, {
          channelId: channelUsername,
          username: channelUsername,
          title: item.author || channelUsername,
          isActive: true
        });
      }
    });
    
    console.log(`üì∫ Creating ${channels.size} channels...`);
    
    // –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª—ã
    for (const [username, channelData] of channels) {
      try {
        await prisma.telegramChannel.upsert({
          where: { channelId: channelData.channelId },
          update: channelData,
          create: channelData
        });
        console.log(`  ‚úÖ Channel: ${channelData.title}`);
      } catch (error) {
        console.error(`  ‚ùå Failed to create channel ${username}:`, error.message);
      }
    }
    
    console.log('\nüìù Importing posts...');
    
    let imported = 0;
    let skipped = 0;
    let failed = 0;
    
    for (const item of data) {
      try {
        const { channelUsername, messageId } = extractChannelInfo(item);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ—Å—Ç
        const existing = await prisma.telegramPost.findUnique({
          where: {
            messageId_channelUsername: {
              messageId,
              channelUsername
            }
          }
        });
        
        if (existing) {
          skipped++;
          continue;
        }
        
        // –°–æ–∑–¥–∞—ë–º –ø–æ—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è
        await prisma.telegramPost.create({
          data: {
            channelId: channelUsername,
            channelUsername,
            messageId,
            text: item.message,
            imageUrls: item.images || [],
            postDate: new Date(item.date),
            // views —É–±–∏—Ä–∞–µ–º –Ω–∞—Ö—Ä–µ–Ω
            link: item.link,
            rawData: item,
            processed: false
          }
        });
        
        imported++;
        
        if (imported % 10 === 0) {
          console.log(`  ‚úÖ Imported ${imported} posts...`);
        }
        
      } catch (error) {
        failed++;
        console.error(`  ‚ùå Failed to import post:`, error.message);
      }
    }
    
    console.log('\nüìä Import Summary:');
    console.log(`  ‚úÖ Imported: ${imported} posts`);
    console.log(`  ‚è≠Ô∏è  Skipped: ${skipped} posts (already exist)`);
    console.log(`  ‚ùå Failed: ${failed} posts`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const totalPosts = await prisma.telegramPost.count();
    const totalChannels = await prisma.telegramChannel.count();
    
    console.log('\nüìà Database Status:');
    console.log(`  Total channels: ${totalChannels}`);
    console.log(`  Total posts: ${totalPosts}`);
    
  } catch (error) {
    console.error('‚ùå Import failed:', error);
  } finally {
    await prisma.$disconnect();
  }
}

importData();